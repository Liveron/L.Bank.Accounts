// <auto-generated />
using System;
using L.Bank.Accounts.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace L.Bank.Accounts.Migrations
{
    [DbContext(typeof(AccountsDbContext))]
    [Migration("20250812044150_XminVersioning")]
    partial class XminVersioning
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("L.Bank.Accounts.Features.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<DateOnly?>("CloseDate")
                        .HasColumnType("date")
                        .HasColumnName("close_date");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("numeric")
                        .HasColumnName("interest_rate");

                    b.Property<DateOnly?>("MaturityDate")
                        .HasColumnType("date")
                        .HasColumnName("maturity_date");

                    b.Property<DateOnly>("OpenDate")
                        .HasColumnType("date")
                        .HasColumnName("open_date");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_accounts_owner_id");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OwnerId"), "hash");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("L.Bank.Accounts.Features.Accounts.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<Guid?>("CounterpartyAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("counterparty_account_id");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<decimal>("Sum")
                        .HasColumnType("numeric")
                        .HasColumnName("sum");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("DateTime")
                        .HasDatabaseName("ix_transactions_date_time");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("DateTime"), "GIST");

                    b.HasIndex("AccountId", "DateTime")
                        .HasDatabaseName("ix_transactions_account_id_date_time");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("L.Bank.Accounts.Features.Accounts.Transaction", b =>
                {
                    b.HasOne("L.Bank.Accounts.Features.Accounts.Account", null)
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_accounts_account_id");
                });

            modelBuilder.Entity("L.Bank.Accounts.Features.Accounts.Account", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
